# Cross level merging

- Build multi map of potential matches for each node, up to a certain depth (1/2 of max by default)
- Add all nodes of level below the root to the list of nodes to check
- For every level
    - Rebuild multi-map if necessary (if depth of subtrees is smaller than those in multi-map)
    - For every node to check (that has not been eliminated yet)
        - For each other level higher up:
            - For each potential match
                - If equal through deep comparison
                    - Store correspondences for all nodes in the duplicate subtrees
        - If no match found
            - Add to list of nodes to check next
    - Update pointers of nodes in the level above
    - Update pointers of nodes in lower levels to nodes in this level

## Symmetric cross level merging

- Same, for each symmetry option:
    - Build match maps for each symmetry option
    - Deep comparison for each symmetry option
    - Also store symmetry option in correspondence
    
### -OR-
- Convert to SDAG
- Create multi-map of MirrorNode hashes
- The same as normal cross level merging


# Exploiting hidden geometry
1. Normal based
 - Voxels on the surface of a closed object only need to look right from the outside
 - The part of the nodes that lay inside of the surface can be changed as we please
2. Inside/outside based
 - Any node on the inside of a closed surface can be changed as we please
 
Question:
 - How to implement this
    1:
    - Store normal in each node in the SVO
    - When merging nodes, mark nodes as unusable if their normals differ greater than a threshold
    - 
    2:
    - Inner nodes: Do subtree comparisons, but ignore the children that are hidden
    - Leaf nodes:  Do child bit mask comparison, but ignore bits that are hidden
    
 - 

 ## Current status
 - Flood fill from a corner of the scene, marking all nodes on the outside with a bitmask in their parent
 - How to ignore the inside children during subtree comparison?
    - Single level merging: In the comparator of two nodes, take the AND of the outside masks, only compare those children
    - No straightforward compatibility with cross-level merging, since the hashes are precomputed
        - Could maybe pre-compute all hash combinations (2^8 match maps), which is O(256) time increase
    - Problem: Can't sort nodes anymore (so can't put them in a map)
        - Since the comparison between any two nodes is dynamic: ChildMask & OutsideMask
        - Therefore, single-level merging doesn't work in the way it is currently implemented
 
# Lossy compression:
 - Currently only in low levels, on nodes that are referenced infrequently
 - Todo: Noisiness of voxels and "create no holes, only fill them?"
 - Can also use noisiness indicator for fake detail using cycles
    - Wouldn't be useful for flat surfaces, but for organic material/smoke/particles
 
 
# Attribute DAG v2
 - Attributes are encoded as nodes below the geometry leaves
 - option 1: 8 attribute bits encoded as an extra leaf level, e.g. grayscale
   option 2: 8*8 attribute bits, as two extra levels, e.g.
    - 1,2,3 RGB
    - 4, 5  oct. normal
    - 6     roughness
    - 7     reflectance
    - 8     transparency? idk
 - lossy geometry compression should use a different difference metric for the attribute levels
    even with gray codes, one bit difference can significantly change the value of the attribute
        consequetive values only differ by one bit, but it matters a lot which bit changes
    difference at attribute levels can simply be the difference between attribute values
    topology filter is also more effective here
